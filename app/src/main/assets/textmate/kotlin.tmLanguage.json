{
  "fileTypes": ["kt", "kts"],
  "name": "Kotlin",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#annotations"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#constants"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.kotlin",
          "match": "//.*$"
        },
        {
          "name": "comment.block.kotlin",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.kotlin",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.kotlin",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.kotlin",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.kotlin",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.triple.kotlin",
          "begin": "\"\"\"",
          "end": "\"\"\""
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.kotlin",
          "match": "\\b(if|else|when|for|while|do|break|continue|return|try|catch|finally|throw)\\b"
        },
        {
          "name": "keyword.declaration.kotlin",
          "match": "\\b(fun|val|var|class|interface|object|enum|data|sealed|abstract|open|final|override|companion|inner|inline|suspend|operator|infix|external|actual|expect)\\b"
        },
        {
          "name": "keyword.modifier.kotlin",
          "match": "\\b(public|private|protected|internal|lateinit|const|tailrec|crossinline|noinline|reified|vararg)\\b"
        },
        {
          "name": "keyword.other.kotlin",
          "match": "\\b(import|package|as|is|in|out|by|where|init|constructor|this|super|null|true|false)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.kotlin",
          "match": "\\b(String|Int|Long|Double|Float|Boolean|Char|Byte|Short|Any|Unit|Nothing|List|Map|Set|Array|MutableList|MutableMap|MutableSet|Pair|Triple)\\b"
        },
        {
          "name": "entity.name.type.kotlin",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.kotlin",
          "match": "\\b\\d+(\\.\\d+)?[fFdDlL]?\\b"
        },
        {
          "name": "constant.numeric.hex.kotlin",
          "match": "\\b0[xX][0-9a-fA-F]+[lL]?\\b"
        },
        {
          "name": "constant.numeric.binary.kotlin",
          "match": "\\b0[bB][01]+[lL]?\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.kotlin",
          "match": "\\bfun\\s+(\\w+)",
          "captures": {
            "1": {
              "name": "entity.name.function.kotlin"
            }
          }
        },
        {
          "name": "support.function.kotlin",
          "match": "\\b(println|print|readLine|require|check|error|TODO|repeat|let|also|apply|run|with|takeIf|takeUnless)\\b"
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "entity.name.type.class.kotlin",
          "match": "\\b(class|interface|object|enum)\\s+(\\w+)",
          "captures": {
            "2": {
              "name": "entity.name.type.class.kotlin"
            }
          }
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "storage.type.annotation.kotlin",
          "match": "@\\w+"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.kotlin",
          "match": "[+\\-*/=<>!&|^%~?:]"
        },
        {
          "name": "punctuation.kotlin",
          "match": "[\\[\\]{}(),.;]"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.other.kotlin",
          "match": "\\b[A-Z][A-Z0-9_]*\\b"
        }
      ]
    }
  },
  "scopeName": "source.kotlin"
}
